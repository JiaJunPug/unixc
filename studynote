有名信号量sem_open和内存信号量sem_init创建信号量的区别 
分类： C/C++

sem_t *sem sem_open(const char *name, int oflag, .../*mode_t mode,unsinged int value) ;

int sem_init(sem_t *sem,int shared, unsigned int value);

区别：
1.创建有名信号量必须指定一个与信号量相关链的文件名称，这个name通常是文件系统中的某个文件。
  基于内存的信号量不需要指定名称
2.有名信号量sem 是由sem_open分配内存并初始化成value值
  基于内存的信号量是由应用程序分配内存，有sem_init初始化成为value值。如果shared为1，则分配的信号量应该在共享内存中。
3.sem_open不需要类似shared的参数，因为有名信号量总是可以在不同进程间共享的
  而基于内存的信号量通过shared参数来决定是进程内还是进程间共享，并且必须指定相应的内存
4.基于内存的信号量不使用任何类似于O_CREAT标志的东西，也就是说，sem_init总是初始化信号量的值，因此，对于一个给定的信号量，我们必须小心保证只调用sem_init一次，对于一个已经初始化过的信号量调用sem_init,结果是未定义的。
5.内存信号量通过sem_destroy删除信号量，有名信号量通过sem_unlink删除


/*共享内存*/
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <unistd.h>
#include <errno.h>
#include <sys/types.h>
#include <sys/shm.h>
#include <sys/ipc.h>


int main(){
    char    *shmaddr1=NULL;
    int     *shmaddr2=NULL;
    int     shmid1;
    int     shmid2;
    int     ret;
    long    a[2];
    unsigned char  *blk_tp=NULL;
    int     i=0; 
    char    str[24];
    int     count=0;  //可以注释掉

        printf("***************************************\n");
        shmid1 = shmget((key_t)123,24,IPC_CREAT|IPC_EXCL);  
    　　　　//创建共享内存1，24个字节
        if(-1 == shmid1){
            printf("	shmget1	error.   \n");
            return -1;
        }else{
            printf("	shmget1	ok.   \n");
        }
        shmaddr1 = shmat(shmid1,0,SHM_RND);   //将该共享内存1映射到该进程空间
        if(-1 == (long)shmaddr1){
            printf("	shmat1	error.    \n");
            return -1;
        }else{
        printf("	shmat1	ok. \n");
        }
        shmid2 = shmget((key_t)234,24,IPC_CREAT|IPC_EXCL);   //创建共享内存2
        if(-1 == shmid2){
            printf("	shmget2	error.    \n");
            return -1;
        }else{
            printf("	shmget2	ok.   \n");
        }
        shmaddr2 = shmat(shmid2,0,SHM_RND);   //将共享内存2映射到该进程空间
        if(-1 == (long)shmaddr2){
            printf("	shmat2	error.    \n");
            return -1;
        }else{
        printf("	shmat2	ok. \n");
        }
        printf("***************************************\n");

        printf("\n");

    while(count<3)  //这个循环输入可以注释掉，仅仅一次就可以验证共享内存是同步的
    { //这个可以注释掉
        printf("~~~~~~~~~~~~~~~Result%d~~~~~~~~~~~~~~~~~\n",count);
    //   	printf("sizeof(shmaddr1) is %d \n",sizeof(shmaddr1));  
    　　　　 //此次输出仅仅是shmaddr1指针的大小
        memset(shmaddr1,0x00,sizeof(a));   //将该共享内存1初始化为0

        blk_tp=(unsigned char*)shmaddr1;
        i=2*sizeof(long);
        printf("The 1th before shm1 info is : \n");
        while(i>=4){  //初始化之后，输出该共享内存的内容，每四个字节输出一次
                printf("	%02x%02x%02x%02x  \n",*blk_tp,*(blk_tp+1),*(blk_tp+2),*(blk_tp+3));
                blk_tp+=4;
                i -= 4;
        }
        printf("~~~~~~~~~~~~~~~Result%d~~~~~~~~~~~~~~~~~\n",count);

        printf("\n");
        sleep(4);

        memset(a,0,sizeof(a));  //初始化数组a
    //   	printf("sizeof(long) is %d, sizeof(a) is %d. \n",sizeof(long),sizeof(a));
        printf("=======================================\n");
        printf("Please input two long number : \n");
        scanf("%ld %ld",&a[0],&a[1]);   //初始化数组a 一个long是4个字节
        getchar();
        printf("a[0]=%0x,a[1]=%0x,a[0]=%ld,a[1]=%ld \n",a[0],a[1],a[0],a[1]);
        memmove(shmaddr1,a,sizeof(a));   //将共享内存1的内容设置为a数组里面的内容
    //   	printf("strlen(shmaddr1) is %d. \n",strlen((char *)shmaddr1));

            printf("Please input a string and lenth<24 : \n");
            gets(str);  //给共享内存2重新填充新的内容
            memmove(shmaddr2,str,24);
            printf("=======================================\n");
    //      printf("strlen(shmaddr2)  is  %d. \n",strlen((char *)shmaddr2));//求该共享内存的大小

        blk_tp=(unsigned char*)shmaddr1;
        i=2*sizeof(long);
        printf("\n");
        printf("~~~~~~~~~~~~~~~Result%d~~~~~~~~~~~~~~~~~\n",count);
        printf("The 2th after shm1 info is : \n");
        while(i>=4){  //重新输出共享内存1的内容
                printf("	%02x%02x%02x%02x \n",*blk_tp,*(blk_tp+1),*(blk_tp+2),*(blk_tp+3));
                blk_tp+=4;
                i -= 4;
        }

        printf("The shm2 info is : \n	%s \n",shmaddr2);  //输出共享内存2的内容
        printf("~~~~~~~~~~~~~~~Result%d~~~~~~~~~~~~~~~~~\n",count);
        count++;
        sleep(10);
    //sleep 10秒，等待验证进程间数据共享，先运行strlen1,之后再运行strlen2，验证进程间数//据共享
    }//这个可以注释掉
        
    sleep(20);
    printf("\n");

    printf("***************************************\n");
    ret = shmdt(shmaddr1);  //该进程和共享内存1，断开连接
    if(-1 == ret)
    {
        printf("        shm1    shmdt   errno. \n");
     }else{
        printf("        shm1    shmdt   ok.  \n");
     }
     ret = shmctl(shmid1,IPC_RMID,0);    //删除共享内存1
     if(-1 == ret){
            printf("	shmctl1	errno.  \n");
      }else{
            printf("	shmctl1	ok.  \n");
    　　　}
         ret = shmdt(shmaddr2);  //该进程和共享内存2，断开连接
         if(-1 == ret)
         {
            printf("        shm2    shmdt   errno. \n");
         }else{
            printf("        shm2    shmdt   ok.  \n");
        }
        ret = shmctl(shmid2,IPC_RMID,0);    //删除共享内存2
        if(-1 == ret){
            printf("	shmctl2	errno.  \n");
        }else{
            printf("	shmctl2	ok.  \n");
    }
    printf("***************************************\n");

    return 0;
    }
